@page "/profil"
@inject HttpClient Http

<link rel="stylesheet" href="css/profil.css">

<!-- Hauptcontainer -->
<div class="profile-container">
    <!-- Profilbild & Name -->
    <div class="profile-info">
        <img src="@ProfilbildUrl" class="profile-pic" />
        <h2>@Username</h2>
    </div>

    <!-- XP Bar -->
    <div class="xp-container">
        <div class="xp-bar" style="width: @(XPProgress)%"></div>
        <span>Level @Level</span>
    </div>

    <!-- Erfolge -->
    <div class="collapsible" @onclick="ToggleErfolge">
        <span class="indicator @(ShowErfolge ? "open" : "closed")"></span> Erfolge
    </div>
    @if (ShowErfolge)
    {
        <div class="content">
            @if (Erfolge.Count > 0)
            {
                @foreach (var erfolg in Erfolge)
                {
                    <div class="erfolg-item @(erfolg.Erreicht ? "reached" : "not-reached")">
                        @erfolg.Name
                    </div>
                }
            }
            else
            {
                <p>Keine Erfolge gefunden.</p>
            }
        </div>
    }

    <!-- Zutatenlevel -->
    <div class="collapsible" @onclick="ToggleZutaten">
        <span class="indicator @(ShowZutaten ? "open" : "closed")"></span> Zutatenlevel
    </div>
    @if (ShowZutaten)
    {
        <div class="content">
            @if (Zutaten.Count > 0)
            {
                @foreach (var zutat in Zutaten)
                {
                    <div class="zutat-item">
                        <strong>@zutat.Name</strong> - Level @zutat.Level
                    </div>
                }
            }
            else
            {
                <p>Keine Zutaten gefunden.</p>
            }
        </div>
    }
</div>

@code {
    private string Username = "Lädt..."; // Der Name des Benutzers
    private string ProfilbildUrl = "images/profile-placeholder.png"; // Das Profilbild des Benutzers
    private int Level = 0; // Das Level des Benutzers
    private int XP = 0; // Die XP des Benutzers
    private int XPMax = 100; // Maximal XP für den Fortschritt (kann von der API kommen)
    private int XPProgress => XPMax > 0 ? (XP * 100) / XPMax : 0; // Berechnung des XP Fortschritts

    private bool ShowErfolge = false; // Anzeige der Erfolge
    private bool ShowZutaten = false; // Anzeige der Zutaten

    private List<Erfolg> Erfolge = new(); // Liste der Erfolge
    private List<Zutat> Zutaten = new(); // Liste der Zutaten

    // Variablen für die Benutzerdaten
    private string CurrentUsername = "TestUser"; // Hier gib den Benutzernamen ein
    private string CurrentPassword = "TestPass"; // Hier gib das Passwort ein

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // POST-Request an die API, um Benutzerdaten abzurufen
            var loginData = new { username = CurrentUsername, password = CurrentPassword };
            var response = await Http.PostAsJsonAsync("https://192.168.50.240:7067/KuechenQuest/User", loginData);

            if (response.IsSuccessStatusCode)
            {
                // Antwort von der API parsen
                var userData = await response.Content.ReadFromJsonAsync<UserData>();
                if (userData != null)
                {
                    // Die empfangenen Benutzerdaten in Variablen setzen
                    Username = userData.Name;
                    ProfilbildUrl = userData.Email ?? "images/profile-placeholder.png"; // Optional: Hier könnte auch das Profilbild kommen
                    Level = userData.Level;
                    XP = userData.XP;
                    XPMax = 100; // Beispielwert, kann von der API kommen
                }
            }
            else
            {
                Console.WriteLine("Fehler beim Abrufen der Benutzerdaten.");
            }

            // Erfolge von der API abrufen
            var erfolgeData = await Http.GetFromJsonAsync<List<Erfolg>>("https://192.168.50.240:7067/KuechenQuest/Erfolge");
            if (erfolgeData != null)
                Erfolge = erfolgeData;

            // Zutaten von der API abrufen
            var zutatenData = await Http.GetFromJsonAsync<List<Zutat>>("https://192.168.50.240:7067/KuechenQuest/Zutaten");
            if (zutatenData != null)
                Zutaten = zutatenData;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Laden der Daten: {ex.Message}");
        }
    }

    private void ToggleErfolge() => ShowErfolge = !ShowErfolge;
    private void ToggleZutaten() => ShowZutaten = !ShowZutaten;

    // Datenklassen anpassen, um der API-Antwort zu entsprechen
    private class UserData
    {
        public int ID { get; set; }
        public string Name { get; set; } = "";  // Der Benutzername kommt jetzt als "Name"
        public string Email { get; set; } = "";  // Hier könnte man die E-Mail für das Profilbild verwenden
        public int Level { get; set; }
        public int XP { get; set; }
    }

    private class Erfolg { public string Name { get; set; } = ""; public bool Erreicht { get; set; } = false; }
    private class Zutat { public string Name { get; set; } = ""; public int Level { get; set; } = 1; }
}
