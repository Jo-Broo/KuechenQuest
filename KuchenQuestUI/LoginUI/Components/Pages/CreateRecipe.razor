@page "/createrecipe"
@using LoginUI.Components.Models
@inject HttpClient Http
@inject NavigationManager Navigation

@code {
    private string RecipeName { get; set; } = string.Empty;
    private int TimeRequired { get; set; } = 0;
    private string Instructions { get; set; } = string.Empty;
    private string SelectedDifficulty { get; set; } = "Leicht";
    private List<(string Name, string Quantity)> Ingredients { get; set; } = new();
    private List<(string Name, string Quantity)> Utensils { get; set; } = new();
    private bool ShowPopup { get; set; } = false;
    private bool ShowUtensilPopup { get; set; } = false;

    private List<string> AvailableIngredients { get; set; } = new();
    private List<string> AvailableUtensils { get; set; } = new();

    private string SelectedIngredient { get; set; } = string.Empty;
    private string SelectedIngredientQuantity { get; set; } = string.Empty;
    private string SelectedUtensil { get; set; } = string.Empty;
    private string SelectedUtensilQuantity { get; set; } = string.Empty;

    private User CurrentUser { get; set; } = new(); // Benutzer laden

    private readonly Dictionary<string, int> DifficultyMapping = new()
    {
        { "Leicht", 1 },
        { "Mittel", 2 },
        { "Schwer", 3 }
    };

    // Die Modelle für Zutaten und Utensilien
    public class Ingredient
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Category { get; set; }
        public int Quantity { get; set; }
        public string Image { get; set; }
    }

    public class Utensil
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Quantity { get; set; }
        public string Image { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadAvailableIngredients();
        await LoadAvailableUtensils();
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            CurrentUser = await Http.GetFromJsonAsync<User>("https://192.168.37.240:7067/KuechenQuest/User/Current");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Abrufen des Benutzers: {ex.Message}");
        }
    }

    private async Task LoadAvailableIngredients()
    {
        try
        {
            var ingredients = await Http.GetFromJsonAsync<List<Ingredient>>("https://192.168.37.240:7067/KuechenQuest/Ingredient");
            if (ingredients != null)
            {
                AvailableIngredients = ingredients.Select(i => i.Name).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Abrufen der Zutaten: {ex.Message}");
        }
    }

    private async Task LoadAvailableUtensils()
    {
        try
        {
            var utensils = await Http.GetFromJsonAsync<List<Utensil>>("https://192.168.37.240:7067/KuechenQuest/Utensil");
            if (utensils != null)
            {
                AvailableUtensils = utensils.Select(u => u.Name).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Abrufen der Utensilien: {ex.Message}");
        }
    }

    private void AddIngredient()
    {
        if (!string.IsNullOrWhiteSpace(SelectedIngredient) && !string.IsNullOrWhiteSpace(SelectedIngredientQuantity))
        {
            Ingredients.Add((SelectedIngredient, SelectedIngredientQuantity));
            SelectedIngredient = string.Empty;
            SelectedIngredientQuantity = string.Empty;
        }
    }

    private void AddUtensil()
    {
        if (!string.IsNullOrWhiteSpace(SelectedUtensil) && !string.IsNullOrWhiteSpace(SelectedUtensilQuantity))
        {
            Utensils.Add((SelectedUtensil, SelectedUtensilQuantity));
            SelectedUtensil = string.Empty;
            SelectedUtensilQuantity = string.Empty;
        }
    }

    private void RemoveIngredient((string Name, string Quantity) ingredient)
    {
        Ingredients.Remove(ingredient);
    }

    private void RemoveUtensil((string Name, string Quantity) utensil)
    {
        Utensils.Remove(utensil);
    }

    private async Task SubmitRecipe()
    {
        var recipe = new
        {
            id = 0,
            name = RecipeName,
            time = TimeRequired,
            difficulty = DifficultyMapping.GetValueOrDefault(SelectedDifficulty, 1),
            instructions = Instructions,
            rating = 0,
            ratingcount = 0,
            createdby = CurrentUser.Id,
            ingredients = Ingredients.Select(i => new
            {
                id = 0,
                name = i.Name,
                category = 0,
                quantity = int.TryParse(i.Quantity, out int qty) ? qty : 0,
                image = ""
            }).ToList(),
            utensils = Utensils.Select(u => new
            {
                id = 0,
                name = u.Name,
                quantity = int.TryParse(u.Quantity, out int qty) ? qty : 0,
                image = ""
            }).ToList(),
            user = new
            {
                id = CurrentUser.Id,
                name = CurrentUser.Name,
                level = CurrentUser.Level,
                xp = CurrentUser.XP,
                email = CurrentUser.Email
            },
            image = ""
        };

        var response = await Http.PostAsJsonAsync("https://192.168.37.240:7067/KuechenQuest/Recipe", recipe);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/start");
        }
    }
}

<div class="recipe-container">
    <h2>Rezept erstellen</h2>
    <label>Rezeptname:</label>
    <input @bind="RecipeName" />

    <label>Schwierigkeit:</label>
    <select @bind="SelectedDifficulty">
        <option>Leicht</option>
        <option>Mittel</option>
        <option>Schwer</option>
    </select>

    <label>Zutaten:</label>
    <div class="input-group">
        <select @bind="SelectedIngredient">
            <option value="">-- Zutat auswählen --</option>
            @foreach (var ingredient in AvailableIngredients)
            {
                <option>@ingredient</option>
            }
        </select>
        <input @bind="SelectedIngredientQuantity" placeholder="Menge" />
        <button @onclick="AddIngredient">+</button>
        <button @onclick="() => ShowPopup = true">-</button>
    </div>
    <p>@string.Join(", ", Ingredients.Select(i => $"{i.Name} ({i.Quantity})"))</p>

    <label>Utensilien:</label>
    <div class="input-group">
        <select @bind="SelectedUtensil">
            <option value="">-- Utensil auswählen --</option>
            @foreach (var utensil in AvailableUtensils)
            {
                <option>@utensil</option>
            }
        </select>
        <input @bind="SelectedUtensilQuantity" placeholder="Menge" />
        <button @onclick="AddUtensil">+</button>
        <button @onclick="() => ShowUtensilPopup = true">-</button>
    </div>
    <p>@string.Join(", ", Utensils.Select(u => $"{u.Name} ({u.Quantity})"))</p>

    <label>Zeitaufwand (Minuten):</label>
    <input type="number" @bind="TimeRequired" />

    <label>Zubereitung:</label>
    <textarea @bind="Instructions"></textarea>

    <button @onclick="SubmitRecipe">Absenden</button>
</div>

<style>
    .recipe-container {
        background: #2d2d3d;
        padding: 20px;
        border-radius: 10px;
        color: white;
    }

    .input-group {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    input, textarea {
        flex: 1;
        padding: 8px;
        border-radius: 5px;
        border: none;
    }

    button {
        background: #4caf50;
        color: white;
        border: none;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
    }

    p {
        background: #3d3d5c;
        padding: 10px;
        border-radius: 5px;
    }
</style>
