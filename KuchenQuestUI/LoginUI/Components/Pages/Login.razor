@page "/login"

@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Net.Http.Json
@using System.Text.Json

<!-- CSS sicherstellen -->
<link rel="stylesheet" href="css/site.css">

<div class="container">
    <img src="/images/LogoMedium.png" alt="KüchenQuest Logo" class="logo">
    <h1>KüchenQuest</h1>
    <div class="input-group">
        <input type="text" @bind="Username" placeholder="Anmeldename">
    </div>
    <div class="input-group">
        <input type="password" @bind="Password" placeholder="Passwort">
    </div>
    <div class="button-group">
        <button class="login-btn" @onclick="OnLogin">Login</button>
        <button class="register-btn" @onclick="Register">Registrieren</button>
    </div>
    <a href="#" class="guest-link">Als Gast anmelden</a>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
            <p style="color: red; margin-top: 10px;">@ErrorMessage</p>
    }
</div>

@code {
    private string Username { get; set; } = "";
    private string Password { get; set; } = "";
    private string ErrorMessage { get; set; } = "";

    private async Task OnLogin()
    {
        // Überprüfen, ob der Benutzername und das Passwort nicht leer sind
        if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Benutzername und Passwort dürfen nicht leer sein.";
            return;
        }

        try
        {
            // Direktes Erstellen des anonymen Objekts und Senden der POST-Anfrage
            var response = await Http.PostAsJsonAsync(
                "https://192.168.50.240:7067/KuechenQuest/User/Login",
                new { username = Username, password = Password }
            );

            // Loggen der gesendeten Daten zur Überprüfung
            Console.WriteLine("Sende Login-Daten: " + JsonSerializer.Serialize(new { username = Username, password = Password }));

            // Statuscode der Antwort prüfen
            if (response.IsSuccessStatusCode)
            {
                // Erfolgreiches Login, direktes Auslesen der Benutzerinformationen
                var result = await response.Content.ReadFromJsonAsync<UserInfo>();

                if (result != null)  // Überprüfen, ob ein Benutzerobjekt zurückgegeben wurde
                {
                    Console.WriteLine($"Login erfolgreich! Benutzer: {result.Name}");

                    // Weiterleitung nach dem erfolgreichen Login
                    Navigation.NavigateTo("/start");
                }
                else
                {
                    // Fehler, wenn die Antwort leer oder ungültig ist
                    ErrorMessage = "Falscher Benutzername oder Passwort.";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                // Fehler bei ungültigen Anmeldedaten (Bad Request)
                ErrorMessage = "Ungültige Anmeldedaten. Bitte überprüfe deinen Benutzernamen und Passwort.";
            }
            else
            {
                // Fehler bei anderen Statuscodes
                ErrorMessage = $"Fehler beim Anmelden. Statuscode: {response.StatusCode}. Bitte versuche es später.";
            }
        }
        catch (Exception ex)
        {
            // Fehlerbehandlung bei Verbindungsproblemen
            ErrorMessage = "Verbindungsfehler: " + ex.Message;
        }
    }

    private void Register()
    {
        Navigation.NavigateTo("/register");
    }

    // Neue Klasse für das Benutzerobjekt, das von der API zurückgegeben wird
    public class UserInfo
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public int Level { get; set; }
        public int XP { get; set; }
        public string Email { get; set; }
    }
}
