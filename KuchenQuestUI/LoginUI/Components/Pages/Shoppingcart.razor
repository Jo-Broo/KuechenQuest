@page "/shoppingcart"
@using LoginUI.Components.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<link rel="stylesheet" href="css/shoppinglist.css">

<!-- Hauptcontainer -->
<div class="shopping-container">
    <!-- Kopfzeile -->
    <div class="header">
        <img src="/images/icon-menu.png" alt="Menü" class="menu-icon"/>
        <h2>Einkaufsliste</h2>
        <img src="/images/LogoSmall.png" alt="App Logo" class="app-logo" />
    </div>

    <!-- Suchleiste -->
    <div class="search-area">
        <img src="/images/icons8-suche-50.png" alt="Search" class="search-icon" />
        <input type="text" placeholder="Suche..."
        class="search-input"
        @bind="SearchText"
        @bind:event="oninput" />
    </div>

    @foreach (var cat in Categories)
    {
        <div class="category-card">@cat.NAME</div>
        <div class="item-row">
            @foreach (var prod in FilterProducts(Ingredients, cat.ID))
            {
                <!-- Per Klick wird der Zustand umgeschaltet -->
                <div class="item-card @(prod.IsSelected ? "selected" : "not-selected")"
                @onclick="() => ToggleProduct(prod)">
                    @prod.NAME
                </div>
            }
        </div>
    }

    <!-- (Optional) Liste mit aktuell ausgewählten Produkten -->
    <div class="shopping-list-display">
        <h3>Einkaufsliste</h3>
        @if (!SelectedProducts.Any())
        {
            <p>(Keine Artikel ausgewählt)</p>
        }
        else
        {
            <ul>
                @foreach (var item in SelectedProducts)
                {
                    <li>@item.NAME <input class="search-bar" type="text" style="border:1px solid white"/> </li>
                }
            </ul>
        }
    </div>
    <button @onclick="BackToHomescreen">Zurück</button>
</div>


@code {
    // Liste aller Kategorien + Produkte
    private List<Category> Categories = new();
    private List<Ingredient> Ingredients = new();

    private IEnumerable<Ingredient> SelectedProducts
        => Ingredients.Where(i => i.IsSelected);


    // Suchtext zum Filtern
    private string SearchText = "";

    //Klick-Event: toggelt den Zustand "IsSelected"
    private void ToggleProduct(Ingredient ingredient)
    {
        ingredient.IsSelected = !ingredient.IsSelected;
    }

    // Liefert gefilterte Produkte (nach SearchText)
    private IEnumerable<Ingredient> FilterProducts(IEnumerable<Ingredient> ingredients, int category)
    {
        List<Ingredient> result = new();
        result = ingredients.Where(i => i.CATEGORY == category).ToList();

        if (string.IsNullOrWhiteSpace(SearchText))
            return result;

        return result.Where(p => p.NAME.Contains(SearchText));
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetCategorys();
        GetIngredients();
    }

    private async Task GetCategorys()
    {
        try
        {
            // Direktes Erstellen des anonymen Objekts und Senden der POST-Anfrage
            var response = await Http.GetAsync($"https://192.168.37.240:7067/KuechenQuest/Ingredient/Category");

            if (response.IsSuccessStatusCode)
            {
                List<Category>? result = await response.Content.ReadFromJsonAsync<List<Category>>();

                if (result != null)
                {
                    this.Categories = result;
                }
            }
        }
        catch (Exception)
        {
            this.Categories = new();
        }

        StateHasChanged();
    }

    private async Task GetIngredients()
    {
        try
        {
            // Direktes Erstellen des anonymen Objekts und Senden der POST-Anfrage
            var response = await Http.GetAsync($"https://192.168.37.240:7067/KuechenQuest/Ingredient");

            if (response.IsSuccessStatusCode)
            {
                List<Ingredient>? result = await response.Content.ReadFromJsonAsync<List<Ingredient>>();

                if (result != null)
                {
                    this.Ingredients = result;
                }
            }
        }
        catch (Exception)
        {
            this.Categories = new();
        }

        StateHasChanged();
    }

    private void BackToHomescreen()
    {
        Navigation.NavigateTo("/start");
    }
}


