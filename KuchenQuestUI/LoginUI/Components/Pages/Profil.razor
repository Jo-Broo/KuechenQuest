@page "/profil"
@using LoginUI.Components.Models
@using LoginUI.Components.Service
@inject HttpClient Http
@inject NavigationManager Navigation
@inject UserService User

<link rel="stylesheet" href="css/profil.css">

<!-- Hauptcontainer -->
<div class="profile-container">
    <!-- Profilbild & Name -->
    <div class="profile-info">
        <img src="@ProfilbildUrl" class="profile-pic" />
        <h2>@User.CurrentUser.Name</h2>
    </div>

    <!-- XP Bar -->
    <div class="xp-container">
        <div class="xp-bar" style="width: @(XPProgress)%"></div>
        <span>Level @User.CurrentUser.Level (@User.CurrentUser.XP/@(@User.CurrentUser.Level*100))</span>
    </div>

    <!-- Erfolge -->
    <div class="collapsible" @onclick="ToggleErfolge">
        <span class="indicator @(ShowErfolge ? "open" : "closed")"></span> Erfolge
    </div>
    @if (ShowErfolge)
    {
        <div class="content">
            @if (Erfolge.Count > 0)
            {
                <div class="erfolg-item reached">
                    <table width="100%">
                        @foreach (var erfolg in Erfolge)
                        {
                            <tr>
                                <td width="25%">@erfolg.NAME</td>
                                <td width="75%">@erfolg.DESCRIPTION</td>
                            </tr>
                        }
                    </table>
                </div>
            }
            else
            {
                <p>Keine Erfolge gefunden.</p>
            }
        </div>
    }

    <!-- Zutatenlevel -->
    <div class="collapsible" @onclick="ToggleZutaten">
        <span class="indicator @(ShowZutaten ? "open" : "closed")"></span> Zutatenlevel
    </div>
    @if (ShowZutaten)
    {
        <div class="content">
            @if (Zutaten.Count > 0)
            {
                @foreach (var zutat in Zutaten)
                {
                    <div class="zutat-item">
                        <strong>@zutat.Name</strong> - Level @zutat.Level
                    </div>
                }
            }
            else
            {
                <p>Keine Zutaten gefunden.<br />(Coming Soon)</p>
            }
        </div>
    }

    <button @onclick="BackToHomescreen">Zurück</button>
</div>

@code {
    private string Username = "Lädt..."; // Der Name des Benutzers
    private string ProfilbildUrl = "http://192.168.37.240:80/Images/Placeholder.png"; // Das Profilbild des Benutzers

    private bool ShowErfolge = false; // Anzeige der Erfolge
    private bool ShowZutaten = false; // Anzeige der Zutaten

    private List<Achievement> Erfolge = new(); // Liste der Erfolge
    private List<Zutat> Zutaten = new(); // Liste der Zutaten

    async Task GetAchievments()
    {
        try
        {
            // Direktes Erstellen des anonymen Objekts und Senden der POST-Anfrage
            var response = await Http.GetAsync($"https://192.168.37.240:7067/KuechenQuest/User/Achievement/{User.CurrentUser.Id}");

            if (response.IsSuccessStatusCode)
            {
                List<Achievement>? result = await response.Content.ReadFromJsonAsync<List<Achievement>>();

                if (result != null)
                {
                    this.Erfolge = result;
                }
            }
        }
        catch (Exception)
        {
            this.Erfolge = new();
        }
    }
    void GetIngredients(){}

    private async Task ToggleErfolge()
    {
        await GetAchievments();
        ShowErfolge = !ShowErfolge;
    }
    private void ToggleZutaten() => ShowZutaten = !ShowZutaten;

    private class Zutat { public string Name { get; set; } = ""; public int Level { get; set; } = 1; }

    private void BackToHomescreen()
    {
        Navigation.NavigateTo("/start");
    }
}
