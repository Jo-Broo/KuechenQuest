@page "/createrecipe"
@using LoginUI.Components.Models
@using LoginUI.Components.Service
@inject HttpClient Http
@inject NavigationManager Navigation
@inject UserService User


@code {
    private string RecipeName { get; set; } = string.Empty;
    private int TimeRequired { get; set; } = 0;
    private string Instructions { get; set; } = string.Empty;
    private string SelectedDifficulty { get; set; } = "Leicht";
    private List<Ingredient> Ingredients { get; set; } = new();
    private List<Utensil> Utensils { get; set; } = new();
    private bool ShowPopup { get; set; } = false;
    private bool ShowUtensilPopup { get; set; } = false;

    private List<Ingredient> AvailableIngredients { get; set; } = new();
    private List<Utensil> AvailableUtensils { get; set; } = new();

    private string SelectedIngredient { get; set; } = string.Empty;
    private string SelectedIngredientQuantity { get; set; } = string.Empty;
    private string SelectedUtensil { get; set; } = string.Empty;
    private string SelectedUtensilQuantity { get; set; } = string.Empty;

    private readonly Dictionary<string, int> DifficultyMapping = new()
    {
        { "Leicht", 1 },
        { "Mittel", 2 },
        { "Schwer", 3 }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableIngredients();
        await LoadAvailableUtensils();
    }

    private async Task LoadAvailableIngredients()
    {
        try
        {
            var ingredients = await Http.GetFromJsonAsync<List<Ingredient>>("https://192.168.37.240:7067/KuechenQuest/Ingredient");
            if (ingredients != null)
            {
                AvailableIngredients = ingredients;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Abrufen der Zutaten: {ex.Message}");
        }
    }

    private async Task LoadAvailableUtensils()
    {
        try
        {
            var utensils = await Http.GetFromJsonAsync<List<Utensil>>("https://192.168.37.240:7067/KuechenQuest/Utensil");
            if (utensils != null)
            {
                AvailableUtensils = utensils;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler beim Abrufen der Utensilien: {ex.Message}");
        }
    }

    private void AddIngredient()
    {
        if (!string.IsNullOrWhiteSpace(SelectedIngredient) && !string.IsNullOrWhiteSpace(SelectedIngredientQuantity))
        {
            Ingredients.Add(new Ingredient
                {
                    NAME = SelectedIngredient,
                    QUANTITY = int.TryParse(SelectedIngredientQuantity, out int qty) ? qty : 0,
                    ID = AvailableIngredients.Where(i => i.NAME == SelectedIngredient).ToList()[0].ID, // Hier kannst du die tatsächliche ID setzen, falls du diese hast
                    IMAGE = "" // Falls du ein Bild hinzufügst, setze es hier
                });

            SelectedIngredient = string.Empty;
            SelectedIngredientQuantity = string.Empty;
        }
    }

    private void AddUtensil()
    {
        if (!string.IsNullOrWhiteSpace(SelectedUtensil) && !string.IsNullOrWhiteSpace(SelectedUtensilQuantity))
        {
            Utensils.Add(new Utensil
                {
                    NAME = SelectedUtensil,
                    QUANTITY = int.TryParse(SelectedUtensilQuantity, out int qty) ? qty : 0,
                    ID = AvailableUtensils.Where(u => u.NAME == SelectedUtensil).ToList()[0].ID, // Hier kannst du die tatsächliche ID setzen, falls du diese hast
                    IMAGE = "" // Falls du ein Bild hinzufügst, setze es hier
                });

            SelectedUtensil = string.Empty;
            SelectedUtensilQuantity = string.Empty;
        }
    }

    private void RemoveIngredient(Ingredient ingredient)
    {
        Ingredients.Remove(ingredient);
    }

    private void RemoveUtensil(Utensil utensil)
    {
        Utensils.Remove(utensil);
    }

    private async Task SubmitRecipe()
    {
        Recipe recipe = new Recipe();
        recipe.DIFFICULTY = DifficultyMapping.GetValueOrDefault(SelectedDifficulty, 1);
        recipe.NAME = RecipeName;
        recipe.Utensils = Utensils;
        recipe.Ingredients = Ingredients;
        recipe.INSTRUCTIONS = Instructions;
        recipe.TIME = TimeRequired;
        recipe.User = User.CurrentUser ?? new User();
        recipe.CREATEDBY = recipe.User.Id;

        try
        {
            var response = await Http.PostAsJsonAsync("https://192.168.37.240:7067/KuechenQuest/Recipe", recipe);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/cookingbook");
            }
            else
            {
                var errorResponse = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception)
        {
            // Nix
        }
    }
}

<div class="recipe-container">
    <h2>Rezept erstellen</h2>
    <label>Rezeptname:</label>
    <input @bind="RecipeName" />

    <label>Schwierigkeit:</label>
    <select @bind="SelectedDifficulty">
        <option>Leicht</option>
        <option>Mittel</option>
        <option>Schwer</option>
    </select>

    <label>Zutaten:</label>
    <div class="input-group">
        <select @bind="SelectedIngredient">
            <option value="">-- Zutat auswählen --</option>
            @foreach (var ingredient in AvailableIngredients)
            {
                <option>@ingredient.NAME</option>
            }
        </select>
        <input @bind="SelectedIngredientQuantity" placeholder="Menge" />
        <button @onclick="AddIngredient">+</button>
        <button @onclick="() => ShowPopup = true">-</button>
    </div>
    <p>@string.Join(", ", Ingredients.Select(i => $"{i.NAME} ({i.QUANTITY})"))</p>

    <label>Utensilien:</label>
    <div class="input-group">
        <select @bind="SelectedUtensil">
            <option value="">-- Utensil auswählen --</option>
            @foreach (var utensil in AvailableUtensils)
            {
                <option>@utensil.NAME</option>
            }
        </select>
        <input @bind="SelectedUtensilQuantity" placeholder="Menge" />
        <button @onclick="AddUtensil">+</button>
        <button @onclick="() => ShowUtensilPopup = true">-</button>
    </div>
    <p>@string.Join(", ", Utensils.Select(u => $"{u.NAME} ({u.QUANTITY})"))</p>

    <label>Zeitaufwand (Minuten):</label>
    <input type="number" @bind="TimeRequired" />

    <label>Zubereitung:</label>
    <textarea @bind="Instructions"></textarea>

    <button @onclick="SubmitRecipe">Absenden</button>
</div>

<style>
    .recipe-container {
        background: #2d2d3d;
        padding: 20px;
        border-radius: 10px;
        color: white;
    }

    .input-group {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    input, textarea {
        flex: 1;
        padding: 8px;
        border-radius: 5px;
        border: none;
    }

    button {
        background: #4caf50;
        color: white;
        border: none;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
    }

    p {
        background: #3d3d5c;
        padding: 10px;
        border-radius: 5px;
    }
</style>
